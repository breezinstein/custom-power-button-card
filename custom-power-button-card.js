!function(){"use strict";class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this._hass=null,this.config=null,this.holdTimer=null,this.holdStarted=!1}setConfig(t){if(!t)throw new Error("Invalid configuration");if(!t.entity)throw new Error("Entity is required");if(!t.bar_entity)throw new Error("Bar entity is required");this.config={tap_action:{action:"more-info"},show_state:!0,show_icon:!1,bar_min:0,bar_max:1500,color_good:"var(--success-color)",color_bad:"var(--error-color)",color_mid:"var(--warning-color)",...t}}set hass(t){this._hass=t,this.render()}connectedCallback(){this.render()}render(){if(!this._hass||!this.config)return;const t=this._hass.states[this.config.entity],n=this._hass.states[this.config.bar_entity];if(!t)return void(this.shadowRoot.innerHTML=`\n        <ha-card>\n          <div style="padding: 16px; color: var(--error-color);">\n            Entity not found: ${this.config.entity}\n          </div>\n        </ha-card>\n      `);const e=parseFloat(n?.state||0),o=!!n,i=!isNaN(e),a="on"===t.state,s=n?.attributes?.unit_of_measurement||"";let r,c=0;o&&i?c=Math.max(0,Math.min(100,(e-this.config.bar_min)/(this.config.bar_max-this.config.bar_min)*100)):o||(c=a?100:0),r=o?i?c<=33?this.config.color_good:c<=66?this.config.color_mid:this.config.color_bad:"var(--disabled-text-color)":a?this.config.color_good:"var(--disabled-text-color)";const d=a?"1":"0.6",h=a?"var(--primary-text-color)":"var(--secondary-text-color)",l=a?"1":"0.3",u=a?"white":"var(--secondary-text-color)",m=this.config.name||t.attributes.friendly_name,p=o?`${Math.trunc(e)}${s}`:t.state;this.shadowRoot.innerHTML=`\n      <style>\n        ha-card {\n          position: relative;\n          overflow: hidden;\n          cursor: pointer;\n        }\n        \n        .card-content {\n          position: relative;\n          border-radius: 10px;\n          background: var(--card-background-color);\n          opacity: ${d};\n          min-height: 24px;\n        }\n        \n        .name {\n          font-size: 14px;\n          font-weight: 500;\n          color: var(--primary-text-color);\n          margin-bottom: 2px;\n          line-height: 1.2;\n        }\n        \n        .state {\n          font-size: 12px;\n          position: absolute;\n          right: 10px;\n          top: 50%;\n          transform: translateY(-50%);\n          color: ${h};\n          line-height: 1.2;\n        }\n        \n        .bar {\n          position: absolute;\n          bottom: 0;\n          left: 0;\n          height: 18px;\n          width: 100%;\n          background: linear-gradient(to right, \n            ${r} 0%, \n            ${r} ${c}%, \n            var(--disabled-text-color) ${c}%, \n            var(--disabled-text-color) 100%);\n          border-radius: 0 0 10px 10px;\n          opacity: ${l};\n        }\n        \n        .bar-label {\n          position: absolute;\n          bottom: 0;\n          left: 50%;\n          transform: translateX(-50%);\n          height: 18px;\n          line-height: 18px;\n          font-size: 11px;\n          font-weight: bold;\n          color: ${u};\n          text-shadow: 1px 1px 2px rgba(0,0,0,0.7);\n          pointer-events: none;\n        }\n      </style>\n        <ha-card>\n        <div class="card-content">\n          <div class="name">${m}</div>\n          \n          ${this.config.show_state&&o?`<div class="state">${t.state}</div>`:""}\n            \n          <div class="bar"></div>\n          <div class="bar-label">${p}</div>\n        </div>\n      </ha-card>\n    `;const g=this.shadowRoot.querySelector("ha-card");g.addEventListener("click",t=>{this.holdStarted||this.handleTap()});const b=t=>{this.holdStarted=!1,this.holdTimer=setTimeout(()=>{this.holdStarted=!0,this.handleHold()},500)},f=t=>{this.holdTimer&&(clearTimeout(this.holdTimer),this.holdTimer=null),setTimeout(()=>{this.holdStarted=!1},50)};g.addEventListener("mousedown",b),g.addEventListener("mouseup",f),g.addEventListener("mouseleave",f),g.addEventListener("touchstart",b,{passive:!0}),g.addEventListener("touchend",f),g.addEventListener("touchcancel",f)}handleHold(){if(!this._hass||!this.config||!this.config.bar_entity)return;const t=new Event("hass-more-info",{bubbles:!0,composed:!0});t.detail={entityId:this.config.bar_entity},this.dispatchEvent(t)}handleTap(){if(!this._hass||!this.config)return;const t=this.config.tap_action;if("more-info"===t.action){const t=new Event("hass-more-info",{bubbles:!0,composed:!0});t.detail={entityId:this.config.entity},this.dispatchEvent(t)}else if("toggle"===t.action)this._hass.callService("homeassistant","toggle",{entity_id:this.config.entity});else if("call-service"===t.action&&t.service){const[n,e]=t.service.split(".");this._hass.callService(n,e,t.service_data||{})}else if("navigate"===t.action&&t.navigation_path){history.pushState(null,"",t.navigation_path);const n=new Event("location-changed",{bubbles:!0,composed:!0});n.detail={replace:!1},window.dispatchEvent(n)}else"url"===t.action&&t.url_path&&window.open(t.url_path)}getCardSize(){return 1}static getConfigElement(){return document.createElement("custom-power-button-card-editor")}static getStubConfig(){return{entity:"switch.example",bar_entity:"sensor.example_power",name:"Example Device",bar_min:0,bar_max:1500}}}customElements.define("custom-power-button-card",t),window.customCards=window.customCards||[],window.customCards.push({type:"custom-power-button-card",name:"Custom Power Button Card",description:"A button card with power consumption bar display",preview:!0,documentationURL:"https://github.com/yourusername/custom-power-button-card"}),console.info("%c CUSTOM-POWER-BUTTON-CARD %c 1.0.0 ","color: orange; font-weight: bold; background: black","color: white; font-weight: bold; background: dimgray")}();
