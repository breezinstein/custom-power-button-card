!function(){"use strict";class n extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this._hass=null,this.config=null}setConfig(n){if(!n)throw new Error("Invalid configuration");if(!n.entity)throw new Error("Entity is required");if(!n.bar_entity)throw new Error("Bar entity is required");this.config={tap_action:{action:"more-info"},show_state:!0,show_icon:!1,bar_min:0,bar_max:1500,color_good:"var(--success-color)",color_bad:"var(--error-color)",color_mid:"var(--warning-color)",...n}}set hass(n){this._hass=n,this.render()}connectedCallback(){this.render()}render(){if(!this._hass||!this.config)return;const n=this._hass.states[this.config.entity],t=this._hass.states[this.config.bar_entity];if(!n||!t)return void(this.shadowRoot.innerHTML=`\n        <ha-card>\n          <div style="padding: 16px; color: var(--error-color);">\n            Entity not found: ${n?this.config.bar_entity:this.config.entity}\n          </div>\n        </ha-card>\n      `);const o=parseFloat(t.state||0),e=Math.max(0,Math.min(100,(o-this.config.bar_min)/(this.config.bar_max-this.config.bar_min)*100));let r;r=e<=33?this.config.color_good:e<=66?this.config.color_mid:this.config.color_bad;const i="on"===n.state,a=t.attributes?.unit_of_measurement||"";this.shadowRoot.innerHTML=`\n      <style>\n        ha-card {\n          position: relative;\n          overflow: hidden;\n          cursor: pointer;\n          transition: all 0.2s ease;\n        }\n        \n        ha-card:hover {\n          transform: scale(1.02);\n        }\n        \n        .card-content {\n          position: relative;\n          padding: 16px;\n          border-radius: 10px;\n          background: ${i?"var(--card-background-color)":"var(--disabled-text-color)"};\n          opacity: ${i?"1":"0.6"};\n          min-height: 60px;\n        }\n        \n        .name {\n          font-size: 14px;\n          font-weight: bold;\n          color: ${i?"var(--primary-text-color)":"var(--secondary-text-color)"};\n          margin-bottom: 4px;\n        }\n        \n        .state {\n          font-size: 12px;\n          position: absolute;\n          right: 16px;\n          top: 16px;\n          color: ${i?"var(--primary-text-color)":"var(--secondary-text-color)"};\n        }\n        \n        .bar {\n          position: absolute;\n          bottom: 0;\n          left: 0;\n          height: 18px;\n          width: 100%;\n          background: linear-gradient(to right, \n            ${r} 0%, \n            ${r} ${e}%, \n            var(--disabled-text-color) ${e}%, \n            var(--disabled-text-color) 100%);\n          border-radius: 0 0 10px 10px;\n          opacity: ${i?"1":"0.3"};\n        }\n        \n        .bar-label {\n          position: absolute;\n          bottom: 0;\n          left: 50%;\n          transform: translateX(-50%);\n          height: 18px;\n          line-height: 18px;\n          font-size: 11px;\n          font-weight: bold;\n          color: ${i?"white":"var(--secondary-text-color)"};\n          text-shadow: 1px 1px 2px rgba(0,0,0,0.7);\n          pointer-events: none;\n        }\n      </style>\n      \n      <ha-card>\n        <div class="card-content">\n          <div class="name">\n            ${this.config.name||n.attributes.friendly_name}\n          </div>\n          \n          ${this.config.show_state?`\n            <div class="state">\n              ${n.state}\n            </div>\n          `:""}\n          \n          <div class="bar"></div>\n          \n          <div class="bar-label">\n            ${Math.trunc(o)}${a}\n          </div>\n        </div>\n      </ha-card>\n    `;this.shadowRoot.querySelector("ha-card").addEventListener("click",()=>{this.handleTap()})}handleTap(){const n=new Event("hass-action",{bubbles:!0,composed:!0});n.detail={config:this.config.tap_action,entityId:this.config.entity},this.dispatchEvent(n)}getCardSize(){return 1}static getConfigElement(){return document.createElement("custom-power-button-card-editor")}static getStubConfig(){return{entity:"switch.example",bar_entity:"sensor.example_power",name:"Example Device",bar_min:0,bar_max:1500}}}customElements.define("custom-power-button-card",n),window.customCards=window.customCards||[],window.customCards.push({type:"custom-power-button-card",name:"Custom Power Button Card",description:"A button card with power consumption bar display",preview:!0,documentationURL:"https://github.com/yourusername/custom-power-button-card"}),console.info("%c CUSTOM-POWER-BUTTON-CARD %c 1.0.0 ","color: orange; font-weight: bold; background: black","color: white; font-weight: bold; background: dimgray")}();
